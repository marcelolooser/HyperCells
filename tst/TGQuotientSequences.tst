gap> START_TEST("HyperCells: TGQuotientSequences.tst");

# define some quotients
gap> qs := List([ [ 2, 1 ], [ 5, 1 ], [ 8, 1 ], [ 10, 1 ] ], qn -> TGQuotient( qn ) );;

# check if the first two form a normal sequence
gap> IsTGQuotientSequence(qs{[ 1, 2 ]});
true

# extend the sequence
gap> next := NextTGQuotientOptions(qs, qs[2]);
[ [ TGQuotient([ 10, 1 ], [ 2, 3, 8 ], 432, 10, Action chiral, [ x^2, y^3, x * y * z, z^8, z * y * x * z^2 * y * x * z * y * z^-1 * x * y^-1 * z^-2 * x * z ]), 9 ], 
  [ TGQuotient([ 8, 1 ], [ 2, 3, 8 ], 336, 8, Action reflexible [m], [ x^2, y^3, x * y * z, z^8, z * y * x * z * y * x * y^-1 * z^-1 * x * y^-1 * z^-1 * x ]), 168 ] ]
gap> seq := ExtendTGQuotientSequence(List(next{[1]}, n -> n[1]), qs{[ 1, 2 ]});;

# compare to the known sequence
gap> G3 := TGQuotientGroup(tg, seq[3]);
<fp group on the generators [ x, y, z ]>
gap> G3Conder := TGQuotientGroup(tg, TGQuotient( [ 37, 1 ] ));
<fp group on the generators [ x, y, z ]>
gap> IdGroup(G3) = IdGroup(G3Conder);
true

# Adjacency matrix for triangle group (2,4,6)
gap> sign := [ 2, 4, 6 ];;
gap> tg := ProperTriangleGroup(sign);;
gap> boundByGenus := 34;;

gap> sparse := false;;
gap> tgQSAdjMat := TGQuotientSequencesAdjacencyMatrix(tg : sparse := sparse, boundByGenus := boundByGenus );
TGQuotientSequencesAdjacencyMatrix( [ 2, 4, 6 ], boundByGenus = 34, ListTGQuotients = [ [ 2, 2 ], [ 3, 4 ], [ 4, 3 ], \
[ 5, 4 ], [ 6, 2 ], [ 9, 3 ], [ 9, 4 ], [ 10, 8 ], [ 10, 9 ], [ 11, 1 ], [ 15, 5 ], [ 17, 4 ], [ 17, 5 ], [ 17, 6 ], [\
 17, 7 ], [ 21, 3 ], [ 28, 8 ], [ 29, 1 ], [ 31, 3 ], [ 33, 6 ], [ 33, 7 ], [ 33, 8 ], [ 33, 9 ], [ 33, 10 ], [ 33, 11\
 ] ], MirrorSymmetries = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1 ], sparse = false\
, adjMatrix = [ [ 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1 ], [ 0, 0, 0, 1, 0, 1, 1, \
0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \
0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0,\
 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
 1, 0, 0, 0, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0\
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0\
, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 1, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0 ], [ 0, 0, 0, 0, 0, 0,\
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
 0, 0, 0, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0\
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\
, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0,\
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ])

gap> sparse := true;;
gap> tgQSAdjMatSparse := TGQuotientSequencesAdjacencyMatrix(tg : sparse := sparse, boundByGenus := boundByGenus );
TGQuotientSequencesAdjacencyMatrix( [ 2, 4, 6 ], boundByGenus = 34, ListTGQuotients = [ [ 2, 2 ], [ 3, 4 ], [ 4, 3 ], \
[ 5, 4 ], [ 6, 2 ], [ 9, 3 ], [ 9, 4 ], [ 10, 8 ], [ 10, 9 ], [ 11, 1 ], [ 15, 5 ], [ 17, 4 ], [ 17, 5 ], [ 17, 6 ], [\
 17, 7 ], [ 21, 3 ], [ 28, 8 ], [ 29, 1 ], [ 31, 3 ], [ 33, 6 ], [ 33, 7 ], [ 33, 8 ], [ 33, 9 ], [ 33, 10 ], [ 33, 11\
 ] ], MirrorSymmetries = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1 ], sparse = true,\
 adjMatrix = [ [ [ 1, 4 ], 1 ], [ [ 1, 6 ], 1 ], [ [ 1, 9 ], 1 ], [ [ 1, 12 ], 1 ], [ [ 1, 15 ], 1 ], [ [ 1, 17 ], 1 ]\
, [ [ 1, 21 ], 1 ], [ [ 1, 23 ], 1 ], [ [ 1, 24 ], 1 ], [ [ 1, 25 ], 1 ], [ [ 2, 4 ], 1 ], [ [ 2, 6 ], 1 ], [ [ 2, 7 ]\
, 1 ], [ [ 2, 12 ], 1 ], [ [ 2, 13 ], 1 ], [ [ 2, 14 ], 1 ], [ [ 2, 15 ], 1 ], [ [ 2, 20 ], 1 ], [ [ 2, 21 ], 1 ], [ [\
 2, 22 ], 1 ], [ [ 2, 23 ], 1 ], [ [ 2, 24 ], 1 ], [ [ 2, 25 ], 1 ], [ [ 3, 8 ], 1 ], [ [ 3, 9 ], 1 ], [ [ 3, 17 ], 1 \
], [ [ 4, 6 ], 1 ], [ [ 4, 12 ], 1 ], [ [ 4, 15 ], 1 ], [ [ 4, 21 ], 1 ], [ [ 4, 23 ], 1 ], [ [ 4, 24 ], 1 ], [ [ 4, 2\
5 ], 1 ], [ [ 5, 10 ], 1 ], [ [ 5, 16 ], 1 ], [ [ 5, 19 ], 1 ], [ [ 6, 21 ], 1 ], [ [ 6, 25 ], 1 ], [ [ 7, 13 ], 1 ], \
[ [ 7, 14 ], 1 ], [ [ 7, 15 ], 1 ], [ [ 7, 20 ], 1 ], [ [ 7, 22 ], 1 ], [ [ 7, 23 ], 1 ], [ [ 7, 24 ], 1 ], [ [ 7, 25 \
], 1 ], [ [ 8, 17 ], 1 ], [ [ 9, 17 ], 1 ], [ [ 10, 16 ], 1 ], [ [ 10, 19 ], 1 ], [ [ 11, 18 ], 1 ], [ [ 12, 21 ], 1 ]\
, [ [ 13, 20 ], 1 ], [ [ 13, 23 ], 1 ], [ [ 14, 23 ], 1 ], [ [ 15, 23 ], 1 ], [ [ 15, 24 ], 1 ], [ [ 15, 25 ], 1 ] ])

# Test basic properties
gap> Signature(tgQSAdjMat);
[2, 4, 6]
gap> Signature(tgQSAdjMatSparse);
[2, 4, 6]
gap> BoundByGenus(tgQSAdjMat);
34
gap> BoundByGenus(tgQSAdjMatSparse);
34
gap> GetListTGQuotients(tgQSAdjMat);
[ [ 2, 2 ], [ 3, 4 ], [ 4, 3 ], [ 5, 4 ], [ 6, 2 ], [ 9, 3 ], [ 9, 4 ], [ 10, 8 ], [ 10, 9 ], [ 11, 1 ], [ 15, 5 ],
  [ 17, 4 ], [ 17, 5 ], [ 17, 6 ], [ 17, 7 ], [ 21, 3 ], [ 28, 8 ], [ 29, 1 ], [ 31, 3 ], [ 33, 6 ], [ 33, 7 ],
  [ 33, 8 ], [ 33, 9 ], [ 33, 10 ], [ 33, 11 ] ]
gap> GetListTGQuotients(tgQSAdjMatSparse);
[ [ 2, 2 ], [ 3, 4 ], [ 4, 3 ], [ 5, 4 ], [ 6, 2 ], [ 9, 3 ], [ 9, 4 ], [ 10, 8 ], [ 10, 9 ], [ 11, 1 ], [ 15, 5 ],
  [ 17, 4 ], [ 17, 5 ], [ 17, 6 ], [ 17, 7 ], [ 21, 3 ], [ 28, 8 ], [ 29, 1 ], [ 31, 3 ], [ 33, 6 ], [ 33, 7 ],
  [ 33, 8 ], [ 33, 9 ], [ 33, 10 ], [ 33, 11 ] ]
gap> MirrorSymmetries(tgQSAdjMat);
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1 ]
gap> MirrorSymmetries(tgQSAdjMatSparse);
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1 ]
gap> IsSparse(tgQSAdjMat);
false
gap> IsSparse(tgQSAdjMatSparse);
true
gap> adjMat := AdjacencyMatrix(tgQSAdjMat);
[ [ 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1 ],
  [ 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 ],
  [ 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]
gap> adjMatSparse := AdjacencyMatrix(tgQSAdjMatSparse);
[ [ [ 1, 4 ], 1 ], [ [ 1, 6 ], 1 ], [ [ 1, 9 ], 1 ], [ [ 1, 12 ], 1 ], [ [ 1, 15 ], 1 ], [ [ 1, 17 ], 1 ],
  [ [ 1, 21 ], 1 ], [ [ 1, 23 ], 1 ], [ [ 1, 24 ], 1 ], [ [ 1, 25 ], 1 ], [ [ 2, 4 ], 1 ], [ [ 2, 6 ], 1 ],
  [ [ 2, 7 ], 1 ], [ [ 2, 12 ], 1 ], [ [ 2, 13 ], 1 ], [ [ 2, 14 ], 1 ], [ [ 2, 15 ], 1 ], [ [ 2, 20 ], 1 ],
  [ [ 2, 21 ], 1 ], [ [ 2, 22 ], 1 ], [ [ 2, 23 ], 1 ], [ [ 2, 24 ], 1 ], [ [ 2, 25 ], 1 ], [ [ 3, 8 ], 1 ],
  [ [ 3, 9 ], 1 ], [ [ 3, 17 ], 1 ], [ [ 4, 6 ], 1 ], [ [ 4, 12 ], 1 ], [ [ 4, 15 ], 1 ], [ [ 4, 21 ], 1 ],
  [ [ 4, 23 ], 1 ], [ [ 4, 24 ], 1 ], [ [ 4, 25 ], 1 ], [ [ 5, 10 ], 1 ], [ [ 5, 16 ], 1 ], [ [ 5, 19 ], 1 ],
  [ [ 6, 21 ], 1 ], [ [ 6, 25 ], 1 ], [ [ 7, 13 ], 1 ], [ [ 7, 14 ], 1 ], [ [ 7, 15 ], 1 ], [ [ 7, 20 ], 1 ],
  [ [ 7, 22 ], 1 ], [ [ 7, 23 ], 1 ], [ [ 7, 24 ], 1 ], [ [ 7, 25 ], 1 ], [ [ 8, 17 ], 1 ], [ [ 9, 17 ], 1 ],
  [ [ 10, 16 ], 1 ], [ [ 10, 19 ], 1 ], [ [ 11, 18 ], 1 ], [ [ 12, 21 ], 1 ], [ [ 13, 20 ], 1 ], [ [ 13, 23 ], 1 ],
  [ [ 14, 23 ], 1 ], [ [ 15, 23 ], 1 ], [ [ 15, 24 ], 1 ], [ [ 15, 25 ], 1 ] ]

# Nearest-neighbor adjacency matrix (test sparse multiplication and subtraction)
gap> NearestNeighborAdjacencyMatrix(tgQSAdjMat);
[ [ 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]
gap> NearestNeighborAdjacencyMatrix(tgQSAdjMatSparse);
[ [ [ 1, 4 ], 1 ], [ [ 1, 9 ], 1 ], [ [ 2, 4 ], 1 ], [ [ 2, 7 ], 1 ], [ [ 3, 8 ], 1 ], [ [ 3, 9 ], 1 ],
  [ [ 4, 6 ], 1 ], [ [ 4, 12 ], 1 ], [ [ 4, 15 ], 1 ], [ [ 5, 10 ], 1 ], [ [ 6, 21 ], 1 ], [ [ 6, 25 ], 1 ],
  [ [ 7, 13 ], 1 ], [ [ 7, 14 ], 1 ], [ [ 7, 15 ], 1 ], [ [ 7, 22 ], 1 ], [ [ 8, 17 ], 1 ], [ [ 9, 17 ], 1 ],
  [ [ 10, 16 ], 1 ], [ [ 10, 19 ], 1 ], [ [ 11, 18 ], 1 ], [ [ 12, 21 ], 1 ], [ [ 13, 20 ], 1 ], [ [ 13, 23 ], 1 ],
  [ [ 14, 23 ], 1 ], [ [ 15, 23 ], 1 ], [ [ 15, 24 ], 1 ], [ [ 15, 25 ], 1 ] ]

# Test depth first algorithm
gap> LongestSequence(tgQSAdjMat);
[ [ 2, 2 ], [ 5, 4 ], [ 9, 3 ], [ 33, 11 ] ]
gap> LongestSequence(tgQSAdjMatSparse);
[ [ 2, 2 ], [ 5, 4 ], [ 9, 3 ], [ 33, 11 ] ]
gap> LongestSequence(tgQSAdjMat : quotient := [17,5]);
[ [ 17, 5 ], [ 33, 9 ] ]
gap> LongestSequence(tgQSAdjMatSparse : quotient := [17,5]);
[ [ 17, 5 ], [ 33, 9 ] ]
gap> LongestSequence(tgQSAdjMat : quotient := [17,5], nonMirrorSymmetric := true);
[ [ 17, 5 ], [ 33, 6 ] ]
gap> LongestSequence(tgQSAdjMatSparse : quotient := [17,5], nonMirrorSymmetric := true);
[ [ 17, 5 ], [ 33, 6 ] ]

# Test export/import
gap> str := "";;
gap> output := OutputTextString(str, false);;
gap> Export(tgQSAdjMat, output);;
gap> CloseStream(output);;
gap> Print(str);
HyperCells HCQS version 1.0
[ 2, 4, 6 ]
34
[ [ 2, 2 ], [ 3, 4 ], [ 4, 3 ], [ 5, 4 ], [ 6, 2 ], [ 9, 3 ], [ 9, 4 ], [ 10, 8 ], [ 10, 9 ], [ 11, 1 ], [ 15, 5 ], [ \
17, 4 ], [ 17, 5 ], [ 17, 6 ], [ 17, 7 ], [ 21, 3 ], [ 28, 8 ], [ 29, 1 ], [ 31, 3 ], [ 33, 6 ], [ 33, 7 ], [ 33, 8 ],\
 [ 33, 9 ], [ 33, 10 ], [ 33, 11 ] ]
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1 ]
false
[ [ 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1 ], [ 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1,\
 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 \
], [ 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0\
, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1\
 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \
0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\
 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1\
, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\
, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]

gap> input := InputTextString(str);;
gap> tgQSAdjMat2 := ImportTGQuotientSequencesAdjacencyMatrix(input);
TGQuotientSequencesAdjacencyMatrix( [ 2, 4, 6 ], boundByGenus = 34, ListTGQuotients = [ [ 2, 2 ], [ 3, 4 ], [ 4, 3 ], \
[ 5, 4 ], [ 6, 2 ], [ 9, 3 ], [ 9, 4 ], [ 10, 8 ], [ 10, 9 ], [ 11, 1 ], [ 15, 5 ], [ 17, 4 ], [ 17, 5 ], [ 17, 6 ], [\
 17, 7 ], [ 21, 3 ], [ 28, 8 ], [ 29, 1 ], [ 31, 3 ], [ 33, 6 ], [ 33, 7 ], [ 33, 8 ], [ 33, 9 ], [ 33, 10 ], [ 33, 11\
 ] ], MirrorSymmetries = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1 ], sparse = false\
, adjMatrix = [ [ 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1 ], [ 0, 0, 0, 1, 0, 1, 1, \
0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \
0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0,\
 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
 1, 0, 0, 0, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0\
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0\
, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 1, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0 ], [ 0, 0, 0, 0, 0, 0,\
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
 0, 0, 0, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0\
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\
, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0,\
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ])
gap> tgQSAdjMat = tgQSAdjMat2;
true

# Test export/import (sparse)
gap> str := "";;
gap> output := OutputTextString(str, false);;
gap> Export(tgQSAdjMatSparse, output);;
gap> CloseStream(output);;
gap> Print(str);
HyperCells HCQS version 1.0
[ 2, 4, 6 ]
34
[ [ 2, 2 ], [ 3, 4 ], [ 4, 3 ], [ 5, 4 ], [ 6, 2 ], [ 9, 3 ], [ 9, 4 ], [ 10, 8 ], [ 10, 9 ], [ 11, 1 ], [ 15, 5 ], [ \
17, 4 ], [ 17, 5 ], [ 17, 6 ], [ 17, 7 ], [ 21, 3 ], [ 28, 8 ], [ 29, 1 ], [ 31, 3 ], [ 33, 6 ], [ 33, 7 ], [ 33, 8 ],\
 [ 33, 9 ], [ 33, 10 ], [ 33, 11 ] ]
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1 ]
true
[ [ [ 1, 4 ], 1 ], [ [ 1, 6 ], 1 ], [ [ 1, 9 ], 1 ], [ [ 1, 12 ], 1 ], [ [ 1, 15 ], 1 ], [ [ 1, 17 ], 1 ], [ [ 1, 21 ]\
, 1 ], [ [ 1, 23 ], 1 ], [ [ 1, 24 ], 1 ], [ [ 1, 25 ], 1 ], [ [ 2, 4 ], 1 ], [ [ 2, 6 ], 1 ], [ [ 2, 7 ], 1 ], [ [ 2,\
 12 ], 1 ], [ [ 2, 13 ], 1 ], [ [ 2, 14 ], 1 ], [ [ 2, 15 ], 1 ], [ [ 2, 20 ], 1 ], [ [ 2, 21 ], 1 ], [ [ 2, 22 ], 1 ]\
, [ [ 2, 23 ], 1 ], [ [ 2, 24 ], 1 ], [ [ 2, 25 ], 1 ], [ [ 3, 8 ], 1 ], [ [ 3, 9 ], 1 ], [ [ 3, 17 ], 1 ], [ [ 4, 6 ]\
, 1 ], [ [ 4, 12 ], 1 ], [ [ 4, 15 ], 1 ], [ [ 4, 21 ], 1 ], [ [ 4, 23 ], 1 ], [ [ 4, 24 ], 1 ], [ [ 4, 25 ], 1 ], [ [\
 5, 10 ], 1 ], [ [ 5, 16 ], 1 ], [ [ 5, 19 ], 1 ], [ [ 6, 21 ], 1 ], [ [ 6, 25 ], 1 ], [ [ 7, 13 ], 1 ], [ [ 7, 14 ], \
1 ], [ [ 7, 15 ], 1 ], [ [ 7, 20 ], 1 ], [ [ 7, 22 ], 1 ], [ [ 7, 23 ], 1 ], [ [ 7, 24 ], 1 ], [ [ 7, 25 ], 1 ], [ [ 8\
, 17 ], 1 ], [ [ 9, 17 ], 1 ], [ [ 10, 16 ], 1 ], [ [ 10, 19 ], 1 ], [ [ 11, 18 ], 1 ], [ [ 12, 21 ], 1 ], [ [ 13, 20 \
], 1 ], [ [ 13, 23 ], 1 ], [ [ 14, 23 ], 1 ], [ [ 15, 23 ], 1 ], [ [ 15, 24 ], 1 ], [ [ 15, 25 ], 1 ] ]

gap> input := InputTextString(str);;
gap> tgQSAdjMatSparse2 := ImportTGQuotientSequencesAdjacencyMatrix(input);
TGQuotientSequencesAdjacencyMatrix( [ 2, 4, 6 ], boundByGenus = 34, ListTGQuotients = [ [ 2, 2 ], [ 3, 4 ], [ 4, 3 ], \
[ 5, 4 ], [ 6, 2 ], [ 9, 3 ], [ 9, 4 ], [ 10, 8 ], [ 10, 9 ], [ 11, 1 ], [ 15, 5 ], [ 17, 4 ], [ 17, 5 ], [ 17, 6 ], [\
 17, 7 ], [ 21, 3 ], [ 28, 8 ], [ 29, 1 ], [ 31, 3 ], [ 33, 6 ], [ 33, 7 ], [ 33, 8 ], [ 33, 9 ], [ 33, 10 ], [ 33, 11\
 ] ], MirrorSymmetries = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1 ], sparse = true,\
 adjMatrix = [ [ [ 1, 4 ], 1 ], [ [ 1, 6 ], 1 ], [ [ 1, 9 ], 1 ], [ [ 1, 12 ], 1 ], [ [ 1, 15 ], 1 ], [ [ 1, 17 ], 1 ]\
, [ [ 1, 21 ], 1 ], [ [ 1, 23 ], 1 ], [ [ 1, 24 ], 1 ], [ [ 1, 25 ], 1 ], [ [ 2, 4 ], 1 ], [ [ 2, 6 ], 1 ], [ [ 2, 7 ]\
, 1 ], [ [ 2, 12 ], 1 ], [ [ 2, 13 ], 1 ], [ [ 2, 14 ], 1 ], [ [ 2, 15 ], 1 ], [ [ 2, 20 ], 1 ], [ [ 2, 21 ], 1 ], [ [\
 2, 22 ], 1 ], [ [ 2, 23 ], 1 ], [ [ 2, 24 ], 1 ], [ [ 2, 25 ], 1 ], [ [ 3, 8 ], 1 ], [ [ 3, 9 ], 1 ], [ [ 3, 17 ], 1 \
], [ [ 4, 6 ], 1 ], [ [ 4, 12 ], 1 ], [ [ 4, 15 ], 1 ], [ [ 4, 21 ], 1 ], [ [ 4, 23 ], 1 ], [ [ 4, 24 ], 1 ], [ [ 4, 2\
5 ], 1 ], [ [ 5, 10 ], 1 ], [ [ 5, 16 ], 1 ], [ [ 5, 19 ], 1 ], [ [ 6, 21 ], 1 ], [ [ 6, 25 ], 1 ], [ [ 7, 13 ], 1 ], \
[ [ 7, 14 ], 1 ], [ [ 7, 15 ], 1 ], [ [ 7, 20 ], 1 ], [ [ 7, 22 ], 1 ], [ [ 7, 23 ], 1 ], [ [ 7, 24 ], 1 ], [ [ 7, 25 \
], 1 ], [ [ 8, 17 ], 1 ], [ [ 9, 17 ], 1 ], [ [ 10, 16 ], 1 ], [ [ 10, 19 ], 1 ], [ [ 11, 18 ], 1 ], [ [ 12, 21 ], 1 ]\
, [ [ 13, 20 ], 1 ], [ [ 13, 23 ], 1 ], [ [ 14, 23 ], 1 ], [ [ 15, 23 ], 1 ], [ [ 15, 24 ], 1 ], [ [ 15, 25 ], 1 ] ])
gap> tgQSAdjMatSparse = tgQSAdjMatSparse2;
true

# Test internal (cache) functions
gap> quot1 := [17,5];;
gap> cIdx := toIndex@HyperCells(Concatenation(sign, quot1));
246175
gap> q1 := TGQuotient(quot1);;
gap> genus1 := TGQuotientGenus(q1);;
gap> GAMMA1 := cachedGroup@HyperCells(cIdx : tgANDQuot := [tg, q1]);
Group(<34 generators>)
gap> GAMMA2 := cachedGroup@HyperCells(cIdx : tgANDQuot := [tg, q1]);;
gap> GAMMA1 = GAMMA2;
true

# Test matrix sign function
gap> signMatrix@HyperCells(adjMat*adjMat);
[ [ 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1 ],
  [ 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]

# Test internal (sparse) functions
gap> sparseMatTranspose@HyperCells(adjMatSparse);
[ [ [ 4, 1 ], 1 ], [ [ 4, 2 ], 1 ], [ [ 6, 1 ], 1 ], [ [ 6, 2 ], 1 ], [ [ 6, 4 ], 1 ], [ [ 7, 2 ], 1 ],
  [ [ 8, 3 ], 1 ], [ [ 9, 1 ], 1 ], [ [ 9, 3 ], 1 ], [ [ 10, 5 ], 1 ], [ [ 12, 1 ], 1 ], [ [ 12, 2 ], 1 ],
  [ [ 12, 4 ], 1 ], [ [ 13, 2 ], 1 ], [ [ 13, 7 ], 1 ], [ [ 14, 2 ], 1 ], [ [ 14, 7 ], 1 ], [ [ 15, 1 ], 1 ],
  [ [ 15, 2 ], 1 ], [ [ 15, 4 ], 1 ], [ [ 15, 7 ], 1 ], [ [ 16, 5 ], 1 ], [ [ 16, 10 ], 1 ], [ [ 17, 1 ], 1 ],
  [ [ 17, 3 ], 1 ], [ [ 17, 8 ], 1 ], [ [ 17, 9 ], 1 ], [ [ 18, 11 ], 1 ], [ [ 19, 5 ], 1 ], [ [ 19, 10 ], 1 ],
  [ [ 20, 2 ], 1 ], [ [ 20, 7 ], 1 ], [ [ 20, 13 ], 1 ], [ [ 21, 1 ], 1 ], [ [ 21, 2 ], 1 ], [ [ 21, 4 ], 1 ],
  [ [ 21, 6 ], 1 ], [ [ 21, 12 ], 1 ], [ [ 22, 2 ], 1 ], [ [ 22, 7 ], 1 ], [ [ 23, 1 ], 1 ], [ [ 23, 2 ], 1 ],
  [ [ 23, 4 ], 1 ], [ [ 23, 7 ], 1 ], [ [ 23, 13 ], 1 ], [ [ 23, 14 ], 1 ], [ [ 23, 15 ], 1 ], [ [ 24, 1 ], 1 ],
  [ [ 24, 2 ], 1 ], [ [ 24, 4 ], 1 ], [ [ 24, 7 ], 1 ], [ [ 24, 15 ], 1 ], [ [ 25, 1 ], 1 ], [ [ 25, 2 ], 1 ],
  [ [ 25, 4 ], 1 ], [ [ 25, 6 ], 1 ], [ [ 25, 7 ], 1 ], [ [ 25, 15 ], 1 ] ]
gap> sparseMatMultiply@HyperCells(adjMatSparse, adjMatSparse);
[ [ [ 1, 6 ], 1 ], [ [ 1, 12 ], 1 ], [ [ 1, 15 ], 1 ], [ [ 1, 17 ], 1 ], [ [ 1, 21 ], 3 ], [ [ 1, 23 ], 2 ],
  [ [ 1, 24 ], 2 ], [ [ 1, 25 ], 3 ], [ [ 2, 6 ], 1 ], [ [ 2, 12 ], 1 ], [ [ 2, 13 ], 1 ], [ [ 2, 14 ], 1 ],
  [ [ 2, 15 ], 2 ], [ [ 2, 20 ], 2 ], [ [ 2, 21 ], 3 ], [ [ 2, 22 ], 1 ], [ [ 2, 23 ], 5 ], [ [ 2, 24 ], 3 ],
  [ [ 2, 25 ], 4 ], [ [ 3, 17 ], 2 ], [ [ 4, 21 ], 2 ], [ [ 4, 23 ], 1 ], [ [ 4, 24 ], 1 ], [ [ 4, 25 ], 2 ],
  [ [ 5, 16 ], 1 ], [ [ 5, 19 ], 1 ], [ [ 7, 20 ], 1 ], [ [ 7, 23 ], 3 ], [ [ 7, 24 ], 1 ], [ [ 7, 25 ], 1 ] ]
gap> sparseMatMultiply@HyperCells(adjMatSparse, adjMatSparse : signed := true);
[ [ [ 1, 6 ], 1 ], [ [ 1, 12 ], 1 ], [ [ 1, 15 ], 1 ], [ [ 1, 17 ], 1 ], [ [ 1, 21 ], 1 ], [ [ 1, 23 ], 1 ],
  [ [ 1, 24 ], 1 ], [ [ 1, 25 ], 1 ], [ [ 2, 6 ], 1 ], [ [ 2, 12 ], 1 ], [ [ 2, 13 ], 1 ], [ [ 2, 14 ], 1 ],
  [ [ 2, 15 ], 1 ], [ [ 2, 20 ], 1 ], [ [ 2, 21 ], 1 ], [ [ 2, 22 ], 1 ], [ [ 2, 23 ], 1 ], [ [ 2, 24 ], 1 ],
  [ [ 2, 25 ], 1 ], [ [ 3, 17 ], 1 ], [ [ 4, 21 ], 1 ], [ [ 4, 23 ], 1 ], [ [ 4, 24 ], 1 ], [ [ 4, 25 ], 1 ],
  [ [ 5, 16 ], 1 ], [ [ 5, 19 ], 1 ], [ [ 7, 20 ], 1 ], [ [ 7, 23 ], 1 ], [ [ 7, 24 ], 1 ], [ [ 7, 25 ], 1 ] ]
gap> sparseMatSubtract@HyperCells(adjMatSparse, adjMatSparse);
[  ]


gap> STOP_TEST("TGQuotientSequences.tst");